// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import (
	domain "github.com/input-output-hk/cicero/src/domain"
	mock "github.com/stretchr/testify/mock"

	pgx "github.com/jackc/pgx/v4"

	uuid "github.com/google/uuid"
)

// ActionService is an autogenerated mock type for the ActionService type
type ActionService struct {
	mock.Mock
}

// GetAll provides a mock function with given fields:
func (_m *ActionService) GetAll() ([]*domain.Action, error) {
	ret := _m.Called()

	var r0 []*domain.Action
	if rf, ok := ret.Get(0).(func() []*domain.Action); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*domain.Action)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetById provides a mock function with given fields: _a0
func (_m *ActionService) GetById(_a0 uuid.UUID) (domain.Action, error) {
	ret := _m.Called(_a0)

	var r0 domain.Action
	if rf, ok := ret.Get(0).(func(uuid.UUID) domain.Action); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(domain.Action)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uuid.UUID) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCurrent provides a mock function with given fields:
func (_m *ActionService) GetCurrent() ([]*domain.Action, error) {
	ret := _m.Called()

	var r0 []*domain.Action
	if rf, ok := ret.Get(0).(func() []*domain.Action); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*domain.Action)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetLatestByName provides a mock function with given fields: _a0
func (_m *ActionService) GetLatestByName(_a0 string) (domain.Action, error) {
	ret := _m.Called(_a0)

	var r0 domain.Action
	if rf, ok := ret.Get(0).(func(string) domain.Action); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(domain.Action)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IsRunnable provides a mock function with given fields: _a0
func (_m *ActionService) IsRunnable(_a0 *domain.Action) (bool, map[string]interface{}, error) {
	ret := _m.Called(_a0)

	var r0 bool
	if rf, ok := ret.Get(0).(func(*domain.Action) bool); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 map[string]interface{}
	if rf, ok := ret.Get(1).(func(*domain.Action) map[string]interface{}); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(map[string]interface{})
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(*domain.Action) error); ok {
		r2 = rf(_a0)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// Save provides a mock function with given fields: _a0, _a1
func (_m *ActionService) Save(_a0 pgx.Tx, _a1 *domain.Action) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(pgx.Tx, *domain.Action) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
