// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import (
	domain "github.com/input-output-hk/cicero/src/domain"
	mock "github.com/stretchr/testify/mock"

	uuid "github.com/google/uuid"
)

// EvaluationService is an autogenerated mock type for the EvaluationService type
type EvaluationService struct {
	mock.Mock
}

// EvaluateAction provides a mock function with given fields: src, name, id
func (_m *EvaluationService) EvaluateAction(src string, name string, id uuid.UUID) (domain.ActionDefinition, error) {
	ret := _m.Called(src, name, id)

	var r0 domain.ActionDefinition
	if rf, ok := ret.Get(0).(func(string, string, uuid.UUID) domain.ActionDefinition); ok {
		r0 = rf(src, name, id)
	} else {
		r0 = ret.Get(0).(domain.ActionDefinition)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string, uuid.UUID) error); ok {
		r1 = rf(src, name, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// EvaluateRun provides a mock function with given fields: src, name, id, inputs
func (_m *EvaluationService) EvaluateRun(src string, name string, id uuid.UUID, inputs map[string]interface{}) (domain.RunDefinition, error) {
	ret := _m.Called(src, name, id, inputs)

	var r0 domain.RunDefinition
	if rf, ok := ret.Get(0).(func(string, string, uuid.UUID, map[string]interface{}) domain.RunDefinition); ok {
		r0 = rf(src, name, id, inputs)
	} else {
		r0 = ret.Get(0).(domain.RunDefinition)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string, uuid.UUID, map[string]interface{}) error); ok {
		r1 = rf(src, name, id, inputs)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListActions provides a mock function with given fields: src
func (_m *EvaluationService) ListActions(src string) ([]string, error) {
	ret := _m.Called(src)

	var r0 []string
	if rf, ok := ret.Get(0).(func(string) []string); ok {
		r0 = rf(src)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(src)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
