// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import (
	domain "github.com/input-output-hk/cicero/src/domain"
	mock "github.com/stretchr/testify/mock"

	pgx "github.com/jackc/pgx/v4"

	uuid "github.com/google/uuid"
)

// FactRepository is an autogenerated mock type for the FactRepository type
type FactRepository struct {
	mock.Mock
}

// GetByFields provides a mock function with given fields: _a0
func (_m *FactRepository) GetByFields(_a0 [][]string) ([]*domain.Fact, error) {
	ret := _m.Called(_a0)

	var r0 []*domain.Fact
	if rf, ok := ret.Get(0).(func([][]string) []*domain.Fact); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*domain.Fact)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func([][]string) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetById provides a mock function with given fields: _a0
func (_m *FactRepository) GetById(_a0 uuid.UUID) (domain.Fact, error) {
	ret := _m.Called(_a0)

	var r0 domain.Fact
	if rf, ok := ret.Get(0).(func(uuid.UUID) domain.Fact); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(domain.Fact)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uuid.UUID) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetLatestByFields provides a mock function with given fields: _a0
func (_m *FactRepository) GetLatestByFields(_a0 [][]string) (domain.Fact, error) {
	ret := _m.Called(_a0)

	var r0 domain.Fact
	if rf, ok := ret.Get(0).(func([][]string) domain.Fact); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(domain.Fact)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func([][]string) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Save provides a mock function with given fields: _a0, _a1
func (_m *FactRepository) Save(_a0 pgx.Tx, _a1 *domain.Fact) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(pgx.Tx, *domain.Fact) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
